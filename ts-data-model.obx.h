// Code generated by ObjectBox; DO NOT EDIT.

#ifndef TS_DATA_MODEL_OBX_H
#define TS_DATA_MODEL_OBX_H

#include <cstdint>
#include <vector>
#include <string>

struct NamedTimeRange {
	uint64_t id;
	int64_t begin;
	int64_t end;
	std::string name;
};

struct SensorValues {
	uint64_t id;
	int64_t time;
	double temperatureOutside;
	double temperatureInside;
	double temperatureCpu;
	double loadCpu1;
	double loadCpu2;
	double loadCpu3;
	double loadCpu4;
};


#include "flatbuffers/flatbuffers.h"

class NamedTimeRangeSerializer {
public:
	/// Write given object to the FlatBufferBuilder
	static void toFlatBuffer(flatbuffers::FlatBufferBuilder &fbb, const NamedTimeRange& object) {
		auto offsetname = fbb.CreateString(object.name);
		flatbuffers::uoffset_t fbStart = fbb.StartTable();
		fbb.TrackField(4, fbb.PushElement<uint64_t>(object.id));
		fbb.TrackField(6, fbb.PushElement<int64_t>(object.begin));
		fbb.TrackField(8, fbb.PushElement<int64_t>(object.end));
		fbb.AddOffset(10, offsetname);
		flatbuffers::Offset<flatbuffers::Table> offset;
        offset.o = fbb.EndTable(fbStart);
        fbb.Finish(offset);
	}
	
	/// Read an object from a valid FlatBuffer
	static NamedTimeRange fromFlatBuffer(const void* data, size_t size) {
		const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
		assert(table);
		NamedTimeRange object;
		object.id = table->GetField<uint64_t>(4, 0);
		object.begin = table->GetField<int64_t>(6, 0);
		object.end = table->GetField<int64_t>(8, 0);
		{
			auto* ptr = table->GetPointer<const flatbuffers::Vector<char>*>(10);
			if (ptr) object.name.assign(ptr->begin(), ptr->end()); 
		}
		return object;
	}
};

class SensorValuesSerializer {
public:
	/// Write given object to the FlatBufferBuilder
	static void toFlatBuffer(flatbuffers::FlatBufferBuilder &fbb, const SensorValues& object) {
		flatbuffers::uoffset_t fbStart = fbb.StartTable();
		fbb.TrackField(4, fbb.PushElement<uint64_t>(object.id));
		fbb.TrackField(6, fbb.PushElement<int64_t>(object.time));
		fbb.TrackField(8, fbb.PushElement<double>(object.temperatureOutside));
		fbb.TrackField(10, fbb.PushElement<double>(object.temperatureInside));
		fbb.TrackField(12, fbb.PushElement<double>(object.temperatureCpu));
		fbb.TrackField(14, fbb.PushElement<double>(object.loadCpu1));
		fbb.TrackField(16, fbb.PushElement<double>(object.loadCpu2));
		fbb.TrackField(18, fbb.PushElement<double>(object.loadCpu3));
		fbb.TrackField(20, fbb.PushElement<double>(object.loadCpu4));
		flatbuffers::Offset<flatbuffers::Table> offset;
        offset.o = fbb.EndTable(fbStart);
        fbb.Finish(offset);
	}
	
	/// Read an object from a valid FlatBuffer
	static SensorValues fromFlatBuffer(const void* data, size_t size) {
		const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
		assert(table);
		SensorValues object;
		object.id = table->GetField<uint64_t>(4, 0);
		object.time = table->GetField<int64_t>(6, 0);
		object.temperatureOutside = table->GetField<double>(8, 0.0);
		object.temperatureInside = table->GetField<double>(10, 0.0);
		object.temperatureCpu = table->GetField<double>(12, 0.0);
		object.loadCpu1 = table->GetField<double>(14, 0.0);
		object.loadCpu2 = table->GetField<double>(16, 0.0);
		object.loadCpu3 = table->GetField<double>(18, 0.0);
		object.loadCpu4 = table->GetField<double>(20, 0.0);
		return object;
	}
};

#endif // TS_DATA_MODEL_OBX_H
