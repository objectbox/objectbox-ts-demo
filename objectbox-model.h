// Code generated by ObjectBox; DO NOT EDIT.

#ifndef OBJECTBOX_MODEL_H
#define OBJECTBOX_MODEL_H

#include <cstdbool>
#include <cstdint>

#include "objectbox.h"

#ifdef __cplusplus
extern "C" {
#endif

/// Initializes an ObjectBox model for all entities. 
/// The returned pointer may be NULL if the allocation failed. If the returned model is not NULL, you should check if   
/// any error occurred by calling obx_model_error_code() and/or obx_model_error_message(). If an error occurred, you're
/// responsible for freeing the resources by calling obx_model_free().
/// In case there was no error when setting the model up (i.e. obx_model_error_code() returned 0), you may configure 
/// OBX_store_options with the model by calling obx_opt_model() and subsequently opening a store with obx_store_open().
/// As soon as you call obx_store_open(), the model pointer is consumed and MUST NOT be freed manually.
inline OBX_model* create_obx_model() {
    OBX_model* model = obx_model();
    if (!model) return NULL;

    do { // break on first error
        if (obx_model_entity(model, "namedtimerange", 1, 3765299694136730253)) break;
        if (obx_model_property(model, "id", OBXPropertyType_Long, 1, 5286436616181640468)) break;
        if (obx_model_property_flags(model, OBXPropertyFlags_ID)) break;
        if (obx_model_property(model, "begin", OBXPropertyType_Long, 2, 6593850490799792041)) break;
        if (obx_model_property(model, "end", OBXPropertyType_Long, 3, 2226587369826141769)) break;
        if (obx_model_property(model, "name", OBXPropertyType_String, 4, 8237102737394490261)) break;
        if (obx_model_entity_last_property_id(model, 4, 8237102737394490261)) break;
        
        if (obx_model_entity(model, "sensorvalues", 2, 6576462802871325567)) break;
        if (obx_model_property(model, "id", OBXPropertyType_Long, 1, 7390723389650851566)) break;
        if (obx_model_property_flags(model, OBXPropertyFlags_ID)) break;
        if (obx_model_property(model, "time", OBXPropertyType_Date, 2, 4045039018130861172)) break;
        if (obx_model_property_flags(model, OBXPropertyFlags_ID_COMPANION)) break;
        if (obx_model_property(model, "temperatureoutside", OBXPropertyType_Double, 3, 1178344585895481685)) break;
        if (obx_model_property(model, "temperatureinside", OBXPropertyType_Double, 4, 803419570723764507)) break;
        if (obx_model_property(model, "temperaturecpu", OBXPropertyType_Double, 5, 4480233319781925090)) break;
        if (obx_model_property(model, "loadcpu1", OBXPropertyType_Double, 6, 5622850065863016031)) break;
        if (obx_model_property(model, "loadcpu2", OBXPropertyType_Double, 7, 8376917843086081746)) break;
        if (obx_model_property(model, "loadcpu3", OBXPropertyType_Double, 8, 1972061339506399854)) break;
        if (obx_model_property(model, "loadcpu4", OBXPropertyType_Double, 9, 6954854995237423885)) break;
        if (obx_model_entity_last_property_id(model, 9, 6954854995237423885)) break;
        obx_model_last_entity_id(model, 2, 6576462802871325567);
        } while (false);

    return model; // NOTE: the returned model will contain error information if an error occurred.
}

#ifdef __cplusplus
}
#endif

#endif  // OBJECTBOX_MODEL_H
