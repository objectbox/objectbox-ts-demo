// Code generated by ObjectBox; DO NOT EDIT.

#pragma once

#ifdef __cplusplus
#include <cstdbool>
#include <cstdint>
extern "C" {
#else
#include <stdbool.h>
#include <stdint.h>
#endif
#include "objectbox.h"

/// Initializes an ObjectBox model for all entities. 
/// The returned pointer may be NULL if the allocation failed. If the returned model is not NULL, you should check if   
/// any error occurred by calling obx_model_error_code() and/or obx_model_error_message(). If an error occurred, you're
/// responsible for freeing the resources by calling obx_model_free().
/// In case there was no error when setting the model up (i.e. obx_model_error_code() returned 0), you may configure 
/// OBX_store_options with the model by calling obx_opt_model() and subsequently opening a store with obx_store_open().
/// As soon as you call obx_store_open(), the model pointer is consumed and MUST NOT be freed manually.
static inline OBX_model* create_obx_model() {
    OBX_model* model = obx_model();
    if (!model) return NULL;
    
    obx_model_entity(model, "NamedTimeRange", 1, 3765299694136730253);
    obx_model_property(model, "id", OBXPropertyType_Long, 1, 5286436616181640468);
    obx_model_property_flags(model, OBXPropertyFlags_ID);
    obx_model_property(model, "begin", OBXPropertyType_Date, 2, 6593850490799792041);
    obx_model_property(model, "end", OBXPropertyType_Date, 3, 2226587369826141769);
    obx_model_property(model, "name", OBXPropertyType_String, 4, 8237102737394490261);
    obx_model_entity_last_property_id(model, 4, 8237102737394490261);
    
    obx_model_entity(model, "SensorValues", 2, 6576462802871325567);
    obx_model_property(model, "id", OBXPropertyType_Long, 1, 7390723389650851566);
    obx_model_property_flags(model, OBXPropertyFlags_ID);
    obx_model_property(model, "time", OBXPropertyType_Date, 2, 4045039018130861172);
    obx_model_property_flags(model, OBXPropertyFlags_ID_COMPANION);
    obx_model_property(model, "temperatureOutside", OBXPropertyType_Double, 3, 1178344585895481685);
    obx_model_property(model, "temperatureInside", OBXPropertyType_Double, 4, 803419570723764507);
    obx_model_property(model, "temperatureCpu", OBXPropertyType_Double, 5, 4480233319781925090);
    obx_model_property(model, "loadCpu1", OBXPropertyType_Double, 6, 5622850065863016031);
    obx_model_property(model, "loadCpu2", OBXPropertyType_Double, 7, 8376917843086081746);
    obx_model_property(model, "loadCpu3", OBXPropertyType_Double, 8, 1972061339506399854);
    obx_model_property(model, "loadCpu4", OBXPropertyType_Double, 9, 6954854995237423885);
    obx_model_entity_last_property_id(model, 9, 6954854995237423885);
    
    obx_model_last_entity_id(model, 2, 6576462802871325567);
    return model; // NOTE: the returned model will contain error information if an error occurred.
}

#ifdef __cplusplus
}
#endif
