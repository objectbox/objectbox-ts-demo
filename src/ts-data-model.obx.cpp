// Code generated by ObjectBox; DO NOT EDIT.

#include "ts-data-model.obx.hpp"

const obx::Property<objectbox::tsdemo::NamedTimeRange, OBXPropertyType_Long> objectbox::tsdemo::NamedTimeRange_::id(1);
const obx::Property<objectbox::tsdemo::NamedTimeRange, OBXPropertyType_Date> objectbox::tsdemo::NamedTimeRange_::begin(2);
const obx::Property<objectbox::tsdemo::NamedTimeRange, OBXPropertyType_Date> objectbox::tsdemo::NamedTimeRange_::end(3);
const obx::Property<objectbox::tsdemo::NamedTimeRange, OBXPropertyType_String> objectbox::tsdemo::NamedTimeRange_::name(4);

void objectbox::tsdemo::NamedTimeRange::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const objectbox::tsdemo::NamedTimeRange& object) {
    fbb.Clear();
    auto offsetname = fbb.CreateString(object.name);
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.AddElement(4, object.id);
    fbb.AddElement(6, object.begin);
    fbb.AddElement(8, object.end);
    fbb.AddOffset(10, offsetname);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

objectbox::tsdemo::NamedTimeRange objectbox::tsdemo::NamedTimeRange::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    objectbox::tsdemo::NamedTimeRange object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<objectbox::tsdemo::NamedTimeRange> objectbox::tsdemo::NamedTimeRange::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<objectbox::tsdemo::NamedTimeRange>(new objectbox::tsdemo::NamedTimeRange());
    fromFlatBuffer(data, size, *object);
    return object;
}

void objectbox::tsdemo::NamedTimeRange::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, objectbox::tsdemo::NamedTimeRange& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    outObject.begin = table->GetField<int64_t>(6, 0);
    outObject.end = table->GetField<int64_t>(8, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(10);
        if (ptr) {
            outObject.name.assign(ptr->c_str(), ptr->size());
        } else {
            outObject.name.clear();
        }
    }
}

const obx::Property<objectbox::tsdemo::SensorValues, OBXPropertyType_Long> objectbox::tsdemo::SensorValues_::id(1);
const obx::Property<objectbox::tsdemo::SensorValues, OBXPropertyType_Date> objectbox::tsdemo::SensorValues_::time(2);
const obx::Property<objectbox::tsdemo::SensorValues, OBXPropertyType_Double> objectbox::tsdemo::SensorValues_::temperatureOutside(3);
const obx::Property<objectbox::tsdemo::SensorValues, OBXPropertyType_Double> objectbox::tsdemo::SensorValues_::temperatureInside(4);
const obx::Property<objectbox::tsdemo::SensorValues, OBXPropertyType_Double> objectbox::tsdemo::SensorValues_::temperatureCpu(5);
const obx::Property<objectbox::tsdemo::SensorValues, OBXPropertyType_Double> objectbox::tsdemo::SensorValues_::loadCpu1(6);
const obx::Property<objectbox::tsdemo::SensorValues, OBXPropertyType_Double> objectbox::tsdemo::SensorValues_::loadCpu2(7);
const obx::Property<objectbox::tsdemo::SensorValues, OBXPropertyType_Double> objectbox::tsdemo::SensorValues_::loadCpu3(8);
const obx::Property<objectbox::tsdemo::SensorValues, OBXPropertyType_Double> objectbox::tsdemo::SensorValues_::loadCpu4(9);

void objectbox::tsdemo::SensorValues::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const objectbox::tsdemo::SensorValues& object) {
    fbb.Clear();
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.AddElement(4, object.id);
    fbb.AddElement(6, object.time);
    fbb.AddElement(8, object.temperatureOutside);
    fbb.AddElement(10, object.temperatureInside);
    fbb.AddElement(12, object.temperatureCpu);
    fbb.AddElement(14, object.loadCpu1);
    fbb.AddElement(16, object.loadCpu2);
    fbb.AddElement(18, object.loadCpu3);
    fbb.AddElement(20, object.loadCpu4);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

objectbox::tsdemo::SensorValues objectbox::tsdemo::SensorValues::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    objectbox::tsdemo::SensorValues object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<objectbox::tsdemo::SensorValues> objectbox::tsdemo::SensorValues::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<objectbox::tsdemo::SensorValues>(new objectbox::tsdemo::SensorValues());
    fromFlatBuffer(data, size, *object);
    return object;
}

void objectbox::tsdemo::SensorValues::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, objectbox::tsdemo::SensorValues& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    outObject.time = table->GetField<int64_t>(6, 0);
    outObject.temperatureOutside = table->GetField<double>(8, 0.0);
    outObject.temperatureInside = table->GetField<double>(10, 0.0);
    outObject.temperatureCpu = table->GetField<double>(12, 0.0);
    outObject.loadCpu1 = table->GetField<double>(14, 0.0);
    outObject.loadCpu2 = table->GetField<double>(16, 0.0);
    outObject.loadCpu3 = table->GetField<double>(18, 0.0);
    outObject.loadCpu4 = table->GetField<double>(20, 0.0);
}

